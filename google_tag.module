<?php

/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * Adds a JavaScript snippet to selected page responses to trigger analytics and
 * other tracking items configured using the Google Tag Manager.
 *
 * @author Jim Berry ("solotandem", http://drupal.org/user/240748)
 */

/**
 * Default list of relative paths.
 */
define('GOOGLETAGMANAGER_PATHS', "admin*\nbatch*\nnode/add*\nnode/*/edit\nnode/*/delete\nuser/*/edit*\nuser/*/cancel*");

/**
 * Default list of HTTP response statuses that override path conditions.
 */
define('GOOGLETAGMANAGER_STATUSES', "403 Forbidden\n404 Not Found");

/**
 * Default list of tag classes to allow.
 */
define('GOOGLETAGMANAGER_WHITELIST_CLASSES', "google\nnonGooglePixels\nnonGoogleScripts\nnonGoogleIframes");

/**
 * Default list of tag classes to forbid.
 */
define('GOOGLETAGMANAGER_BLACKLIST_CLASSES', "customScripts\ncustomPixels");

/**
 * Implements hook_help().
 */
function google_tag_help($path, $arg) {
  module_load_include('inc', 'google_tag', 'includes/info');
  return _google_tag_help($path, $arg);
}

/**
 * Implements hook_menu().
 */
function google_tag_menu() {
  module_load_include('inc', 'google_tag', 'includes/info');
  return _google_tag_menu();
}

/**
 * Implements hook_permission().
 */
function google_tag_permission() {
  module_load_include('inc', 'google_tag', 'includes/info');
  return _google_tag_permission();
}

/**
 * Implements hook_variable_group_info().
 */
function google_tag_variable_group_info() {
  module_load_include('inc', 'google_tag', 'includes/variable');
  return _google_tag_variable_group_info();
}

/**
 * Implements hook_variable_info().
 */
function google_tag_variable_info($options) {
  module_load_include('inc', 'google_tag', 'includes/variable');
  return _google_tag_variable_info($options);
}

/**
 * Element validation handler for google_tag_container_id.
 */
function google_tag_validate_container_id($variable, $options, $element, $form, &$form_state) {
  module_load_include('inc', 'google_tag', 'includes/variable');
  return _google_tag_validate_container_id($variable, $options, $element, $form, $form_state);
}

/**
 * Implements hook_page_build().
 *
 * Adds the snippet to the page array if the insertion conditions are met.
 *
 * @see drupal_render_page()
 */
function google_tag_page_build(&$page) {
  if (!google_tag_insert_snippet()) {
    return;
  }

  // Call sequence:
  // - drupal_render_page()
  //   - hook_page_build()
  //   - hook_page_alter()
  //   - drupal_render()
  // - drupal_render()
  //   - callbacks in $elements['#theme_wrappers']
  //     - hook_preprocess_html(): 'html' is the wrapper for page
  //     - templates may add tags after body tag
  //   - callbacks in $elements['#post_render']
  //     - google_tag_page_process(): callback set here

  $wrapper = file_stream_wrapper_get_instance_by_uri('public://');

  // Add data_layer and script snippets to head (by default).
  $include_script_as_file = variable_get('google_tag_include_file', 1);
  if ($include_script_as_file) {
    $base_path = variable_get('file_public_path', conf_path() . '/files');
    foreach (['data_layer', 'script'] as $type) {
      $path = "$base_path/js/google_tag.$type.js";
      // @todo Will it matter if file is empty?
      drupal_add_js($path, array('group' => JS_LIBRARY * 2));
    }
  }
  else {
    $base_path = $wrapper->realpath();
    foreach (['data_layer', 'script'] as $type) {
      $url = "$base_path/js/google_tag.$type.js";
      $contents = file_get_contents($url);
      // @see drupal_get_js()
      // For inline JavaScript to validate as XHTML, all JavaScript containing
      // XHTML needs to be wrapped in CDATA.
      if ($contents) {
        drupal_add_js($contents, array('type' => 'inline', 'group' => JS_LIBRARY * 2));
      }
    }
  }

  // Add noscript snippet to page_top region.
  $base_path = $wrapper->realpath();
  $url = "$base_path/js/google_tag.noscript.js";
  $noscript = file_get_contents($url);

  // Note: for any theme that follows the pattern of core html.tpl.php in the
  // system module (e.g. bootstrap theme), this does not place the snippet
  // immediately after the body tag but rather after the 'skip-link' div.
  $page['page_top']['google_tag'] = array(
    '#markup' => $noscript,
    '#weight' => -10,
  );
}

/**
 * Returns the state of snippet insertion on the current page response.
 *
 * @return boolean
 *   TRUE if the conditions are met; FALSE otherwise.
 */
function google_tag_insert_snippet() {
  global $user;

  $id = variable_get('google_tag_container_id', '');

  if (empty($id)) {
    // No container ID.
    return FALSE;
  }
  $satisfied = TRUE;
  if (!_google_tag_status_check() || !_google_tag_path_check() || !_google_tag_role_check($user)) {
    // Omit snippet if any condition is not met.
    $satisfied = FALSE;
  }
  // Allow other modules to alter the insertion criteria.
  drupal_alter('google_tag_insert', $satisfied);
  return $satisfied;
}

/**
 * Returns state of snippet insertion based on HTTP response status code.
 *
 * @return boolean
 *   TRUE if the status conditions are met; FALSE otherwise.
 */
function _google_tag_status_check() {
  static $satisfied;

  if (!isset($satisfied)) {
    $toggle = variable_get('google_tag_status_toggle', 0);
    $statuses = variable_get('google_tag_status_list', GOOGLETAGMANAGER_STATUSES);

    if (empty($statuses)) {
      $satisfied = !$toggle;
    }
    else {
      // Get the HTTP response status.
      $status = drupal_get_http_header('status');
      $satisfied = strpos($statuses, $status) !== FALSE;
      $satisfied = !($toggle xor $satisfied);
    }
  }
  return $satisfied;
}

/**
 * Returns state of snippet insertion based on HTTP request URI.
 *
 * @return boolean
 *   TRUE if the path conditions are met; FALSE otherwise.
 */
function _google_tag_path_check() {
  static $satisfied;

  if (!isset($satisfied)) {
    $toggle = variable_get('google_tag_path_toggle', 0);
    $paths = variable_get('google_tag_path_list', GOOGLETAGMANAGER_PATHS);

    // Meaning of $toggle
    // - 0: all paths except listed paths
    // - 1: only the listed paths

    if (empty($paths)) {
      $satisfied = !$toggle;
    }
    else {
      // @todo Are not some paths case sensitive???
      // Convert the paths to lowercase before comparison.
      $paths = drupal_strtolower($paths);
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      $satisfied = drupal_match_path($path, $paths);
      // @todo Lowercase $_GET['q'] before comparison? What is purpose of this check?
      if ($path != $_GET['q']) {
        $satisfied = $satisfied || drupal_match_path($_GET['q'], $paths);
      }
      $satisfied = !($toggle xor $satisfied);
    }
  }
  return $satisfied;
}

/**
 * Returns state of snippet insertion based on user roles.
 *
 * @param object $account
 *   A user object containing an array of roles to check.
 *
 * @return boolean
 *   TRUE if the role conditions are met; FALSE otherwise.
 */
function _google_tag_role_check($account) {
  static $satisfied;

  if (!isset($satisfied)) {
    $toggle = variable_get('google_tag_role_toggle', 0);
    $roles = variable_get('google_tag_role_list', array());
    $roles = array_filter($roles);

    // Meaning of $toggle
    // - 0: all roles except listed roles
    // - 1: only the listed roles

    if (empty($roles)) {
      $satisfied = !$toggle;
    }
    else {
      $satisfied = FALSE;
      // Check user roles against listed roles.
      foreach ($account->roles as $rid => $role_name) {
        if (isset($roles[$role_name]) && $roles[$role_name] == $role_name) {
          // User is a member of a listed role.
          $satisfied = TRUE;
          break;
        }
      }
      $satisfied = !($toggle xor $satisfied);
    }
  }
  return $satisfied;
}
