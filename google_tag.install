<?php

/**
 * @file
 * Provides install, update, and uninstall functions.
 */

/**
 * Implements hook_enable().
 */
function google_tag_enable() {
  global $google_tag_display_message;
  $google_tag_display_message = TRUE;
  google_tag_assets_create();
}

/**
 * Implements hook_uninstall().
 */
function google_tag_uninstall() {
  @file_unmanaged_delete_recursive('public://google_tag');

  // @todo Is this relevant here or in _google_tag_snippets_save()?
  backdrop_clear_js_cache();
}

/**
 * Implements hook_requirements().
 */
function google_tag_requirements($phase) {
  $t = get_t();
  $requirements = array();
  if ($phase == 'runtime') {
    if (!preg_match('/^GTM-\w{4,}$/', config_get('google_tag.settings', 'google_tag_container_id'))) {
      // Google Tag Manager container ID has not been set.
      $args = array('@path' => '/admin/config/system/google_tag');
      $description = $t('Configure this integration module on its <a href="@path">settings page</a>.', $args);
      $requirements['google_tag'] = array(
        'title' => $t('Google Tag Manager'),
        'description' => $description,
        'severity' => REQUIREMENT_WARNING,
        'value' => $t('Not configured'),
      );
    }
  }
  if ($phase == 'runtime' || $phase == 'update' || $phase == 'install') {
    // Adapted from system_requirements().
    $directory = 'public://google_tag';
    module_load_include('inc', 'google_tag', 'google_tag.admin');
    if (!is_dir($directory) || !_google_tag_is_writable($directory) || !_google_tag_is_executable($directory)) {
      _file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    }
    $is_executable = _google_tag_is_executable($directory);
    $is_writable = _google_tag_is_writable($directory);
    $is_directory = is_dir($directory);
    if (!$is_executable || !$is_writable || !$is_directory) {
      // The snippet directory does not exist or is not writable or searchable.
      // If applicable, get the directory path of stream wrapper.
      $wrapper = file_stream_wrapper_get_instance_by_uri($directory);
      if (method_exists($wrapper, 'getDirectoryPath') && ($path = $wrapper->getDirectoryPath())) {
        // getDirectoryPath() is not defined in StreamWrapperInterface; it
        // exists in LocalStream and the local storage replacement classes in
        // google_appengine; s3fs returns an empty string.
        $path .= '/google_tag';
      }
      elseif (!($path = $wrapper->getExternalUrl())) {
        $path = $directory;
      }

      if (!$is_directory) {
        $error = $t('The directory %directory does not exist.', array('%directory' => $path));
        $description = $t('An automated attempt to create the directory failed, possibly due to a permissions problem. Create the directory and make it writable.');
        $value = $t('Does not exist');
      }
      elseif (!$is_writable) {
        $error = $t('The directory %directory is not writable.', array('%directory' => $path));
        $description = $t('An automated attempt to make the directory writable failed, possibly due to a permissions problem. Make the directory writable.');
        $value = $t('Not writable');
      }
      else {
        $error = $t('The directory %directory is not searchable.', array('%directory' => $path));
        $description = $t('An automated attempt to make the directory searchable failed, possibly due to a permissions problem. Make the directory searchable.');
        $value = $t('Not searchable');
      }
      if ($phase == 'install') {
        $description .= ' ' . $t('For more information, see the <a href="!handbook_url">online handbook</a>.', array('!handbook_url' => 'https://docs.backdropcms.org/documentation/file-permissions-and-ownership'));
        $value = '';
      }
      $requirements['google_tag_snippet_directory'] = array(
        'title' => $t('Google Tag Manager snippet directory'),
        'description' => "$error $description",
        'severity' => REQUIREMENT_ERROR,
        'value' => $value,
      );
    }
  }
  return $requirements;
}

/**
 * Creates directory for snippet files, if not present.
 *
 * @return bool
 *   Whether the directory exists (or was created) and is writable.
 */
function _google_tag_snippet_directory_prepare() {
  // Create directory if not present.
  $directory = 'public://google_tag';
  $result = file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  if (!$result) {
    backdrop_set_message(t('An error occurred creating a directory for snippet files. Please try again or contact the site administrator if it persists.'));
  }
  return $result;
}

/**
 * Move google_tag settings from variables to config.
 */
function google_tag_update_1000() {
  // Migrate variables to config.
  $config = config('google_tag.settings');
  $config->set('google_tag_container_id', update_variable_get('google_tag_container_id', ''));
  $config->set('google_tag_path_toggle', update_variable_get('google_tag_path_toggle', ''));
  $config->set('google_tag_path_list', update_variable_get('google_tag_path_list', 'admin*\nbatch*\nnode/add*\nnode/*/edit\nnode/*/delete\nuser/*/edit*\nuser/*/cancel*'));
  $config->set('google_tag_role_toggle', update_variable_get('google_tag_role_toggle', ''));
  $config->set('google_tag_role_list', update_variable_get('google_tag_role_list', array()));
  $config->set('google_tag_status_toggle', update_variable_get('google_tag_status_toggle', ''));
  $config->set('google_tag_status_list', update_variable_get('google_tag_status_list', '403 Forbidden\n404 Not Found'));
  $config->set('google_tag_compact_snippet', update_variable_get('google_tag_compact_snippet', 0));
  $config->set('google_tag_include_file', update_variable_get('google_tag_include_file', 1));
  $config->set('google_tag_debug_output', update_variable_get('google_tag_debug_output', 0));
  $config->set('google_tag_data_layer', update_variable_get('google_tag_data_layer', 'dataLayer'));
  $config->set('google_tag_data_layer_classes', update_variable_get('google_tag_data_layer_classes', array()));
  $config->set('google_tag_whitelist_classes', update_variable_get('google_tag_whitelist_classes', 'google\nnonGooglePixels\nnonGoogleScripts\nnonGoogleIframes'));
  $config->set('google_tag_blacklist_classes', update_variable_get('google_tag_blacklist_classes', 'customScripts\ncustomPixels'));
  $config->set('google_tag_include_environment', update_variable_get('google_tag_include_environment', 0));
  $config->set('google_tag_environment_id', update_variable_get('google_tag_environment_id', ''));
  $config->set('google_tag_environment_token', update_variable_get('google_tag_environment_token', ''));
  $config->set('google_tag_include_classes', update_variable_get('google_tag_include_classes', 0));
  $config->save();

  // Delete variables.
  update_variable_del('google_tag_container_id');
  update_variable_del('google_tag_path_toggle');
  update_variable_del('google_tag_path_list');
  update_variable_del('google_tag_role_toggle');
  update_variable_del('google_tag_role_list');
  update_variable_del('google_tag_status_toggle');
  update_variable_del('google_tag_status_list');
  update_variable_del('google_tag_compact_snippet');
  update_variable_del('google_tag_include_file');
  update_variable_del('google_tag_debug_output');
  update_variable_del('google_tag_data_layer');
  update_variable_del('google_tag_data_layer_classes');
  update_variable_del('google_tag_whitelist_classes');
  update_variable_del('google_tag_blacklist_classes');
  update_variable_del('google_tag_include_environment');
  update_variable_del('google_tag_environment_id');
  update_variable_del('google_tag_environment_token');
  update_variable_del('google_tag_include_classes');
}

/**
 * Implements hook_update_last_removed().
 */
function google_tag_update_last_removed() {
  return 7106;
}
