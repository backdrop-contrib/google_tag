<?php

/**
 * @file
 * Provides install, update, and uninstall functions.
 *
 * @author Jim Berry ("solotandem", http://drupal.org/user/240748)
 */

/**
 * Implements hook_install().
 */
function google_tag_install() {
  _google_tag_snippet_directory_prepare();
}

/**
 * Implements hook_uninstall().
 */
function google_tag_uninstall() {
  db_delete('variable')
    ->condition('name', db_like('google_tag_') . '%', 'LIKE')
    ->execute();
}

/**
 * Implements hook_requirements().
 */
function google_tag_requirements($phase) {
  $t = get_t();
  $requirements = array();
  if ($phase == 'runtime') {
    if (!preg_match('/^GTM-\w{4,}$/', variable_get('google_tag_container_id', ''))) {
      // Google Tag Manager container ID has not been set.
      $args = array('@path' => '/admin/config/system/google_tag');
      $description = $t('Configure this integration module on its <a href="@path">settings page</a>.', $args);
      $requirements['google_tag'] = array(
        'title' => $t('Google Tag Manager'),
        'description' => $description,
        'severity' => REQUIREMENT_WARNING,
        'value' => $t('Not configured'),
      );
    }
    if (!is_dir('public://js')) {
      // The snippet directory does not exist or is not writable.
      $path = variable_get('file_public_path', conf_path() . '/files') . '/js';
      $description = $t('Does not exist or is not writable at @path', array('@path' => $path));
      $requirements['google_tag_snippet_directory'] = array(
        'title' => $t('Google Tag Manager snippet directory'),
        'severity' => REQUIREMENT_WARNING,
        'value' => $description,
      );
    }
  }
  return $requirements;
}

/**
 * Convert values in role_list variable from rid to role name.
 */
function google_tag_update_7101(&$sandbox) {
  $roles = user_roles();
  $old_values = variable_get('google_tag_role_list', array());
  $new_values = array();
  foreach ($old_values as $rid => $old_value) {
    $role_name = $roles[$rid];
    $new_values[$role_name] = $old_value;
  }
  variable_set('google_tag_role_list', $new_values);
  return t('Converted @count role IDs to role names in google_tag_role_list variable', array('@count' => count($old_values)));
}

/**
 * Create directory for snippet files, if not present.
 */
function google_tag_update_7102(&$sandbox) {
  $result = _google_tag_snippet_directory_prepare();
  return t('The directory exists (or was created) and is writable: @result', array('@result' => $result ? 1 : 0));
}

/**
 * Creates directory for snippet files, if not present.
 *
 * @return boolean
 *   Whether the directory exists (or was created) and is writable.
 */
function _google_tag_snippet_directory_prepare() {
  // Create directory if not present.
  $directory = 'public://js';
  $result = file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  if (!$result) {
    drupal_set_message(t('An error occurred creating a directory for snippet files. Please try again or contact the site administrator if it persists.'));
  }
  return $result;
}

/**
 * Convert toggle settings from integer to string.
 */
function google_tag_update_7103(&$sandbox) {
  $types = ['path', 'role', 'status'];
  $count = 0;

  if (module_exists('variable_realm') && module_exists('variable_store')) {
    // i18n_variable module depends on variable_realm, variable_store
    // In the course of variable_realm_set() calls will be made to:
    // - cache_clear_all('variables', 'cache_bootstrap');
    // - cache_clear_all('variable:' . $realm . ':' . $key, 'cache_bootstrap');
    // which will clear all relevant cache tables except for cache_variable.
    // Clear the latter at end.
    $realms = variable_realm_list();
    foreach ($realms as $realm_name => $realm_title) {
      $keys = variable_realm_keys($realm_name);
      foreach ($keys as $key_name => $key_title) {
        foreach ($types as $type) {
          $name = "google_tag_{$type}_toggle";
          $value = variable_realm_get($realm_name, $key_name, $name);
          is_null($value) ? sdp("value is null") : '';
          if (!is_null($value)) {
            $new_value = $value ? GOOGLE_TAG_INCLUDE_LISTED : GOOGLE_TAG_EXCLUDE_LISTED;
            variable_realm_set($realm_name, $key_name, $name, $new_value, FALSE);
            $count++;
          }
        }
      }
    }
    variable_cache_clear();
  }
  else {
    global $conf;
    foreach ($types as $type) {
      $name = "google_tag_{$type}_toggle";
      if (isset($conf[$name])) {
        $new_value = $conf[$name] ? GOOGLE_TAG_INCLUDE_LISTED : GOOGLE_TAG_EXCLUDE_LISTED;
        variable_set($name, $new_value);
        $count++;
      }
    }
  }

  return t('Converted @count toggle settings', ['@count' => $count]);
}
